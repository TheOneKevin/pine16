
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 UNKNOWN, x86_64-linux-gnu-g++ 7.3.0-16ubuntu3 -O3 -DNDEBUG)


-- Parsing `cpu/DECODER.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: cpu/DECODER.v
Parsing Verilog input from `cpu/DECODER.v' to AST representation.
Generating RTLIL representation for module `\DECODER'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Finding top of design hierarchy..
root of   0 design levels: DECODER             
Automatically selected DECODER as design top module.

2.2.2. Analyzing design hierarchy..
Top module:  \DECODER

2.2.3. Analyzing design hierarchy..
Top module:  \DECODER
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$cpu/DECODER.v:122$176 in module DECODER.
Removed 1 dead cases from process $proc$cpu/DECODER.v:83$65 in module DECODER.
Marked 3 switch rules as full_case in process $proc$cpu/DECODER.v:83$65 in module DECODER.
Marked 1 switch rules as full_case in process $proc$cpu/DECODER.v:50$51 in module DECODER.
Removed a total of 1 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\DECODER.$proc$cpu/DECODER.v:121$231'.
  Set init value: \fsm2_next = 2'01
Found init rule in `\DECODER.$proc$cpu/DECODER.v:120$230'.
  Set init value: \fsm2 = 2'00
Found init rule in `\DECODER.$proc$cpu/DECODER.v:116$229'.
  Set init value: \ignoreAck = 1'0
Found init rule in `\DECODER.$proc$cpu/DECODER.v:73$228'.
  Set init value: \active = 1'0
Found init rule in `\DECODER.$proc$cpu/DECODER.v:72$227'.
  Set init value: \fsm1_next = 2'00
Found init rule in `\DECODER.$proc$cpu/DECODER.v:71$226'.
  Set init value: \fsm1 = 2'00
Found init rule in `\DECODER.$proc$cpu/DECODER.v:66$225'.
  Set init value: \data_r = 16'0000000000000000
Found init rule in `\DECODER.$proc$cpu/DECODER.v:40$224'.
  Set init value: \rp = 4'0000
Found init rule in `\DECODER.$proc$cpu/DECODER.v:40$223'.
  Set init value: \wp = 4'0000
Found init rule in `\DECODER.$proc$cpu/DECODER.v:17$222'.
  Set init value: \req = 1'1

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:121$231'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:120$230'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:116$229'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:73$228'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:72$227'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:71$226'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:66$225'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:40$224'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:40$223'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:17$222'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:122$176'.
     1/10: $0\fsm2_next[1:0]
     2/10: $0\fsm2[1:0]
     3/10: $0\ignoreAck[0:0]
     4/10: $0\flush[0:0]
     5/10: $0\active[0:0]
     6/10: $0\fsm1[1:0]
     7/10: $0\cur[7:0]
     8/10: $0\data_r[15:0]
     9/10: $0\adr[19:0]
    10/10: $0\req[0:0]
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:83$65'.
     1/114: $3\wp[3:0]
     2/114: $2\wp[3:0]
     3/114: $1\i[31:0]
     4/114: $1\wp[3:0]
     5/114: $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68
     6/114: $0$memwr$\fmm0$cpu/DECODER.v:87$9_DATA[7:0]$67
     7/114: $0$memwr$\fmm0$cpu/DECODER.v:87$9_ADDR[31:0]$66
     8/114: $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71
     9/114: $0$memwr$\fmm1$cpu/DECODER.v:88$10_DATA[7:0]$70
    10/114: $0$memwr$\fmm1$cpu/DECODER.v:88$10_ADDR[31:0]$69
    11/114: $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74
    12/114: $0$memwr$\fmm2$cpu/DECODER.v:89$11_DATA[7:0]$73
    13/114: $0$memwr$\fmm2$cpu/DECODER.v:89$11_ADDR[31:0]$72
    14/114: $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77
    15/114: $0$memwr$\fmm3$cpu/DECODER.v:90$12_DATA[7:0]$76
    16/114: $0$memwr$\fmm3$cpu/DECODER.v:90$12_ADDR[31:0]$75
    17/114: $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80
    18/114: $0$memwr$\fmm0$cpu/DECODER.v:87$13_DATA[7:0]$79
    19/114: $0$memwr$\fmm0$cpu/DECODER.v:87$13_ADDR[31:0]$78
    20/114: $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83
    21/114: $0$memwr$\fmm1$cpu/DECODER.v:88$14_DATA[7:0]$82
    22/114: $0$memwr$\fmm1$cpu/DECODER.v:88$14_ADDR[31:0]$81
    23/114: $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86
    24/114: $0$memwr$\fmm2$cpu/DECODER.v:89$15_DATA[7:0]$85
    25/114: $0$memwr$\fmm2$cpu/DECODER.v:89$15_ADDR[31:0]$84
    26/114: $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89
    27/114: $0$memwr$\fmm3$cpu/DECODER.v:90$16_DATA[7:0]$88
    28/114: $0$memwr$\fmm3$cpu/DECODER.v:90$16_ADDR[31:0]$87
    29/114: $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92
    30/114: $0$memwr$\fmm0$cpu/DECODER.v:87$17_DATA[7:0]$91
    31/114: $0$memwr$\fmm0$cpu/DECODER.v:87$17_ADDR[31:0]$90
    32/114: $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95
    33/114: $0$memwr$\fmm1$cpu/DECODER.v:88$18_DATA[7:0]$94
    34/114: $0$memwr$\fmm1$cpu/DECODER.v:88$18_ADDR[31:0]$93
    35/114: $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98
    36/114: $0$memwr$\fmm2$cpu/DECODER.v:89$19_DATA[7:0]$97
    37/114: $0$memwr$\fmm2$cpu/DECODER.v:89$19_ADDR[31:0]$96
    38/114: $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101
    39/114: $0$memwr$\fmm3$cpu/DECODER.v:90$20_DATA[7:0]$100
    40/114: $0$memwr$\fmm3$cpu/DECODER.v:90$20_ADDR[31:0]$99
    41/114: $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104
    42/114: $0$memwr$\fmm0$cpu/DECODER.v:87$21_DATA[7:0]$103
    43/114: $0$memwr$\fmm0$cpu/DECODER.v:87$21_ADDR[31:0]$102
    44/114: $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107
    45/114: $0$memwr$\fmm1$cpu/DECODER.v:88$22_DATA[7:0]$106
    46/114: $0$memwr$\fmm1$cpu/DECODER.v:88$22_ADDR[31:0]$105
    47/114: $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110
    48/114: $0$memwr$\fmm2$cpu/DECODER.v:89$23_DATA[7:0]$109
    49/114: $0$memwr$\fmm2$cpu/DECODER.v:89$23_ADDR[31:0]$108
    50/114: $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113
    51/114: $0$memwr$\fmm3$cpu/DECODER.v:90$24_DATA[7:0]$112
    52/114: $0$memwr$\fmm3$cpu/DECODER.v:90$24_ADDR[31:0]$111
    53/114: $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116
    54/114: $0$memwr$\fmm0$cpu/DECODER.v:87$25_DATA[7:0]$115
    55/114: $0$memwr$\fmm0$cpu/DECODER.v:87$25_ADDR[31:0]$114
    56/114: $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119
    57/114: $0$memwr$\fmm1$cpu/DECODER.v:88$26_DATA[7:0]$118
    58/114: $0$memwr$\fmm1$cpu/DECODER.v:88$26_ADDR[31:0]$117
    59/114: $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122
    60/114: $0$memwr$\fmm2$cpu/DECODER.v:89$27_DATA[7:0]$121
    61/114: $0$memwr$\fmm2$cpu/DECODER.v:89$27_ADDR[31:0]$120
    62/114: $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125
    63/114: $0$memwr$\fmm3$cpu/DECODER.v:90$28_DATA[7:0]$124
    64/114: $0$memwr$\fmm3$cpu/DECODER.v:90$28_ADDR[31:0]$123
    65/114: $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128
    66/114: $0$memwr$\fmm0$cpu/DECODER.v:87$29_DATA[7:0]$127
    67/114: $0$memwr$\fmm0$cpu/DECODER.v:87$29_ADDR[31:0]$126
    68/114: $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131
    69/114: $0$memwr$\fmm1$cpu/DECODER.v:88$30_DATA[7:0]$130
    70/114: $0$memwr$\fmm1$cpu/DECODER.v:88$30_ADDR[31:0]$129
    71/114: $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134
    72/114: $0$memwr$\fmm2$cpu/DECODER.v:89$31_DATA[7:0]$133
    73/114: $0$memwr$\fmm2$cpu/DECODER.v:89$31_ADDR[31:0]$132
    74/114: $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137
    75/114: $0$memwr$\fmm3$cpu/DECODER.v:90$32_DATA[7:0]$136
    76/114: $0$memwr$\fmm3$cpu/DECODER.v:90$32_ADDR[31:0]$135
    77/114: $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140
    78/114: $0$memwr$\fmm0$cpu/DECODER.v:87$33_DATA[7:0]$139
    79/114: $0$memwr$\fmm0$cpu/DECODER.v:87$33_ADDR[31:0]$138
    80/114: $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143
    81/114: $0$memwr$\fmm1$cpu/DECODER.v:88$34_DATA[7:0]$142
    82/114: $0$memwr$\fmm1$cpu/DECODER.v:88$34_ADDR[31:0]$141
    83/114: $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146
    84/114: $0$memwr$\fmm2$cpu/DECODER.v:89$35_DATA[7:0]$145
    85/114: $0$memwr$\fmm2$cpu/DECODER.v:89$35_ADDR[31:0]$144
    86/114: $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149
    87/114: $0$memwr$\fmm3$cpu/DECODER.v:90$36_DATA[7:0]$148
    88/114: $0$memwr$\fmm3$cpu/DECODER.v:90$36_ADDR[31:0]$147
    89/114: $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152
    90/114: $0$memwr$\fmm0$cpu/DECODER.v:87$37_DATA[7:0]$151
    91/114: $0$memwr$\fmm0$cpu/DECODER.v:87$37_ADDR[31:0]$150
    92/114: $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155
    93/114: $0$memwr$\fmm1$cpu/DECODER.v:88$38_DATA[7:0]$154
    94/114: $0$memwr$\fmm1$cpu/DECODER.v:88$38_ADDR[31:0]$153
    95/114: $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158
    96/114: $0$memwr$\fmm2$cpu/DECODER.v:89$39_DATA[7:0]$157
    97/114: $0$memwr$\fmm2$cpu/DECODER.v:89$39_ADDR[31:0]$156
    98/114: $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161
    99/114: $0$memwr$\fmm3$cpu/DECODER.v:90$40_DATA[7:0]$160
   100/114: $0$memwr$\fmm3$cpu/DECODER.v:90$40_ADDR[31:0]$159
   101/114: $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164
   102/114: $0$memwr$\fmm0$cpu/DECODER.v:95$41_DATA[7:0]$163
   103/114: $0$memwr$\fmm0$cpu/DECODER.v:95$41_ADDR[2:0]$162
   104/114: $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167
   105/114: $0$memwr$\fmm1$cpu/DECODER.v:99$42_DATA[7:0]$166
   106/114: $0$memwr$\fmm1$cpu/DECODER.v:99$42_ADDR[2:0]$165
   107/114: $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170
   108/114: $0$memwr$\fmm2$cpu/DECODER.v:104$43_DATA[7:0]$169
   109/114: $0$memwr$\fmm2$cpu/DECODER.v:104$43_ADDR[2:0]$168
   110/114: $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173
   111/114: $0$memwr$\fmm3$cpu/DECODER.v:108$44_DATA[7:0]$172
   112/114: $0$memwr$\fmm3$cpu/DECODER.v:108$44_ADDR[2:0]$171
   113/114: $0\szw[0:0]
   114/114: $0\fsm1_next[1:0]
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:50$51'.
     1/2: $0\rp[3:0]
     2/2: $0\instr[31:0]
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:47$49'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:45$47'.
Creating decoders for process `\DECODER.$proc$cpu/DECODER.v:43$45'.

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\DECODER.\empty' from process `\DECODER.$proc$cpu/DECODER.v:47$49'.
No latch inferred for signal `\DECODER.\full' from process `\DECODER.$proc$cpu/DECODER.v:45$47'.
No latch inferred for signal `\DECODER.\fill' from process `\DECODER.$proc$cpu/DECODER.v:43$45'.

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DECODER.\req' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `\DECODER.\adr' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `\DECODER.\data_r' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `\DECODER.\cur' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\DECODER.\fsm1' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `\DECODER.\active' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\DECODER.\flush' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\DECODER.\ignoreAck' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\DECODER.\fsm2' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\DECODER.\fsm2_next' using process `\DECODER.$proc$cpu/DECODER.v:122$176'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `\DECODER.\wp' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$902' with negative edge clock.
Creating register for signal `\DECODER.\fsm1_next' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$903' with negative edge clock.
Creating register for signal `\DECODER.\szw' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$904' with negative edge clock.
Creating register for signal `\DECODER.\i' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$905' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$9_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$906' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$9_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$907' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$9_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$908' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$10_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$909' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$10_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$910' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$10_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$911' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$11_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$912' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$11_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$913' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$11_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$914' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$12_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$915' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$12_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$916' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$12_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$917' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$13_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$918' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$13_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$919' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$13_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$920' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$14_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$921' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$14_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$922' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$14_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$923' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$15_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$924' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$15_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$925' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$15_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$926' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$16_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$927' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$16_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$928' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$16_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$929' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$17_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$930' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$17_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$931' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$17_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$932' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$18_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$933' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$18_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$934' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$18_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$935' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$19_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$936' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$19_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$937' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$19_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$938' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$20_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$939' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$20_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$940' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$20_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$941' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$21_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$942' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$21_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$943' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$21_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$944' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$22_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$945' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$22_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$946' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$22_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$947' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$23_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$948' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$23_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$949' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$23_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$950' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$24_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$951' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$24_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$952' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$24_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$953' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$25_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$954' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$25_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$955' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$25_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$956' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$26_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$957' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$26_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$958' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$26_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$959' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$27_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$960' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$27_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$961' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$27_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$962' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$28_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$963' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$28_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$964' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$28_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$965' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$29_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$966' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$29_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$967' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$29_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$968' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$30_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$969' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$30_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$970' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$30_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$971' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$31_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$972' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$31_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$973' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$31_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$974' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$32_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$975' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$32_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$976' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$32_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$977' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$33_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$978' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$33_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$979' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$33_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$980' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$34_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$981' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$34_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$982' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$34_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$983' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$35_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$984' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$35_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$985' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$35_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$986' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$36_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$987' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$36_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$988' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$36_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$989' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$37_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$990' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$37_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$991' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:87$37_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$992' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$38_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$993' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$38_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$994' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:88$38_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$995' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$39_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$996' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$39_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$997' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:89$39_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$998' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$40_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$999' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$40_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1000' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:90$40_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1001' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:95$41_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1002' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:95$41_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1003' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm0$cpu/DECODER.v:95$41_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1004' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:99$42_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1005' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:99$42_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1006' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm1$cpu/DECODER.v:99$42_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1007' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:104$43_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1008' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:104$43_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1009' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm2$cpu/DECODER.v:104$43_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1010' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:108$44_ADDR' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1011' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:108$44_DATA' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1012' with negative edge clock.
Creating register for signal `\DECODER.$memwr$\fmm3$cpu/DECODER.v:108$44_EN' using process `\DECODER.$proc$cpu/DECODER.v:83$65'.
  created $dff cell `$procdff$1013' with negative edge clock.
Creating register for signal `\DECODER.\acki' using process `\DECODER.$proc$cpu/DECODER.v:50$51'.
  created $dff cell `$procdff$1014' with positive edge clock.
Creating register for signal `\DECODER.\instr' using process `\DECODER.$proc$cpu/DECODER.v:50$51'.
  created $dff cell `$procdff$1015' with positive edge clock.
Creating register for signal `\DECODER.\rp' using process `\DECODER.$proc$cpu/DECODER.v:50$51'.
  created $dff cell `$procdff$1016' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `DECODER.$proc$cpu/DECODER.v:121$231'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:120$230'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:116$229'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:73$228'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:72$227'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:71$226'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:66$225'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:40$224'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:40$223'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:17$222'.
Found and cleaned up 6 empty switches in `\DECODER.$proc$cpu/DECODER.v:122$176'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:122$176'.
Found and cleaned up 3 empty switches in `\DECODER.$proc$cpu/DECODER.v:83$65'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:83$65'.
Found and cleaned up 2 empty switches in `\DECODER.$proc$cpu/DECODER.v:50$51'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:50$51'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:47$49'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:45$47'.
Removing empty process `DECODER.$proc$cpu/DECODER.v:43$45'.
Cleaned up 11 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 2 unused cells and 297 unused wires.

2.9. Executing CHECK pass (checking for obvious problems).
checking module DECODER..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 36 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DECODER..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$396: \sigflush -> 1'1
      Replacing known input bits on port A of cell $procmux$391: \flush -> 1'0
      Replacing known input bits on port A of cell $procmux$434: \req -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$444.
    dead port 1/2 on $mux $procmux$447.
    dead port 1/2 on $mux $procmux$453.
Removed 3 multiplexer ports.

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DECODER.
    New ctrl vector for $mux cell $procmux$391: { }
    New ctrl vector for $pmux cell $procmux$398: { $procmux$371_CMP $auto$opt_reduce.cc:132:opt_mux$1018 }
    New ctrl vector for $pmux cell $procmux$405: $auto$opt_reduce.cc:132:opt_mux$1020
    New ctrl vector for $mux cell $procmux$434: { }
    New ctrl vector for $pmux cell $procmux$439: { $procmux$443_CMP $auto$opt_reduce.cc:132:opt_mux$1022 }
    Consolidated identical input bits for $mux cell $procmux$462:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$9_EN[7:0]$68 [0] }
    Consolidated identical input bits for $mux cell $procmux$471:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$10_EN[7:0]$71 [0] }
    Consolidated identical input bits for $mux cell $procmux$480:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$11_EN[7:0]$74 [0] }
    Consolidated identical input bits for $mux cell $procmux$489:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$12_EN[7:0]$77 [0] }
    Consolidated identical input bits for $mux cell $procmux$498:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$13_EN[7:0]$80 [0] }
    Consolidated identical input bits for $mux cell $procmux$507:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$14_EN[7:0]$83 [0] }
    Consolidated identical input bits for $mux cell $procmux$516:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$15_EN[7:0]$86 [0] }
    Consolidated identical input bits for $mux cell $procmux$525:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$16_EN[7:0]$89 [0] }
    Consolidated identical input bits for $mux cell $procmux$534:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$17_EN[7:0]$92 [0] }
    Consolidated identical input bits for $mux cell $procmux$543:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$18_EN[7:0]$95 [0] }
    Consolidated identical input bits for $mux cell $procmux$552:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$19_EN[7:0]$98 [0] }
    Consolidated identical input bits for $mux cell $procmux$561:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$20_EN[7:0]$101 [0] }
    Consolidated identical input bits for $mux cell $procmux$570:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$21_EN[7:0]$104 [0] }
    Consolidated identical input bits for $mux cell $procmux$579:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$22_EN[7:0]$107 [0] }
    Consolidated identical input bits for $mux cell $procmux$588:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$23_EN[7:0]$110 [0] }
    Consolidated identical input bits for $mux cell $procmux$597:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$24_EN[7:0]$113 [0] }
    Consolidated identical input bits for $mux cell $procmux$606:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$25_EN[7:0]$116 [0] }
    Consolidated identical input bits for $mux cell $procmux$615:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$26_EN[7:0]$119 [0] }
    Consolidated identical input bits for $mux cell $procmux$624:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$27_EN[7:0]$122 [0] }
    Consolidated identical input bits for $mux cell $procmux$633:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$28_EN[7:0]$125 [0] }
    Consolidated identical input bits for $mux cell $procmux$642:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$29_EN[7:0]$128 [0] }
    Consolidated identical input bits for $mux cell $procmux$651:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$30_EN[7:0]$131 [0] }
    Consolidated identical input bits for $mux cell $procmux$660:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$31_EN[7:0]$134 [0] }
    Consolidated identical input bits for $mux cell $procmux$669:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$32_EN[7:0]$137 [0] }
    Consolidated identical input bits for $mux cell $procmux$678:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$33_EN[7:0]$140 [0] }
    Consolidated identical input bits for $mux cell $procmux$687:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$34_EN[7:0]$143 [0] }
    Consolidated identical input bits for $mux cell $procmux$696:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$35_EN[7:0]$146 [0] }
    Consolidated identical input bits for $mux cell $procmux$705:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$36_EN[7:0]$149 [0] }
    Consolidated identical input bits for $mux cell $procmux$714:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] $0$memwr$\fmm0$cpu/DECODER.v:87$37_EN[7:0]$152 [0] }
    Consolidated identical input bits for $mux cell $procmux$723:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] $0$memwr$\fmm1$cpu/DECODER.v:88$38_EN[7:0]$155 [0] }
    Consolidated identical input bits for $mux cell $procmux$732:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] $0$memwr$\fmm2$cpu/DECODER.v:89$39_EN[7:0]$158 [0] }
    Consolidated identical input bits for $mux cell $procmux$741:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] $0$memwr$\fmm3$cpu/DECODER.v:90$40_EN[7:0]$161 [0] }
    Consolidated identical input bits for $mux cell $procmux$753:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$753_Y
      New ports: A=1'0, B=1'1, Y=$procmux$753_Y [0]
      New connections: $procmux$753_Y [7:1] = { $procmux$753_Y [0] $procmux$753_Y [0] $procmux$753_Y [0] $procmux$753_Y [0] $procmux$753_Y [0] $procmux$753_Y [0] $procmux$753_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$785:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$785_Y
      New ports: A=1'0, B=1'1, Y=$procmux$785_Y [0]
      New connections: $procmux$785_Y [7:1] = { $procmux$785_Y [0] $procmux$785_Y [0] $procmux$785_Y [0] $procmux$785_Y [0] $procmux$785_Y [0] $procmux$785_Y [0] $procmux$785_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$814:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$814_Y
      New ports: A=1'0, B=1'1, Y=$procmux$814_Y [0]
      New connections: $procmux$814_Y [7:1] = { $procmux$814_Y [0] $procmux$814_Y [0] $procmux$814_Y [0] $procmux$814_Y [0] $procmux$814_Y [0] $procmux$814_Y [0] $procmux$814_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$840:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$840_Y
      New ports: A=1'0, B=1'1, Y=$procmux$840_Y [0]
      New connections: $procmux$840_Y [7:1] = { $procmux$840_Y [0] $procmux$840_Y [0] $procmux$840_Y [0] $procmux$840_Y [0] $procmux$840_Y [0] $procmux$840_Y [0] $procmux$840_Y [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1019: { $procmux$361_CMP $procmux$367_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1017: { $procmux$361_CMP $procmux$367_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1021: { $procmux$440_CMP $procmux$441_CMP $procmux$442_CMP }
  Optimizing cells in module \DECODER.
    Consolidated identical input bits for $mux cell $procmux$755:
      Old ports: A=8'00000000, B=$procmux$753_Y, Y=$procmux$755_Y
      New ports: A=1'0, B=$procmux$753_Y [0], Y=$procmux$755_Y [0]
      New connections: $procmux$755_Y [7:1] = { $procmux$755_Y [0] $procmux$755_Y [0] $procmux$755_Y [0] $procmux$755_Y [0] $procmux$755_Y [0] $procmux$755_Y [0] $procmux$755_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$787:
      Old ports: A=8'00000000, B=$procmux$785_Y, Y=$procmux$787_Y
      New ports: A=1'0, B=$procmux$785_Y [0], Y=$procmux$787_Y [0]
      New connections: $procmux$787_Y [7:1] = { $procmux$787_Y [0] $procmux$787_Y [0] $procmux$787_Y [0] $procmux$787_Y [0] $procmux$787_Y [0] $procmux$787_Y [0] $procmux$787_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$816:
      Old ports: A=8'00000000, B=$procmux$814_Y, Y=$procmux$816_Y
      New ports: A=1'0, B=$procmux$814_Y [0], Y=$procmux$816_Y [0]
      New connections: $procmux$816_Y [7:1] = { $procmux$816_Y [0] $procmux$816_Y [0] $procmux$816_Y [0] $procmux$816_Y [0] $procmux$816_Y [0] $procmux$816_Y [0] $procmux$816_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$842:
      Old ports: A=8'00000000, B=$procmux$840_Y, Y=$procmux$842_Y
      New ports: A=1'0, B=$procmux$840_Y [0], Y=$procmux$842_Y [0]
      New connections: $procmux$842_Y [7:1] = { $procmux$842_Y [0] $procmux$842_Y [0] $procmux$842_Y [0] $procmux$842_Y [0] $procmux$842_Y [0] $procmux$842_Y [0] $procmux$842_Y [0] }
  Optimizing cells in module \DECODER.
    Consolidated identical input bits for $mux cell $procmux$758:
      Old ports: A=$procmux$755_Y, B=8'00000000, Y=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164
      New ports: A=$procmux$755_Y [0], B=1'0, Y=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0]
      New connections: $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7:1] = { $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [0] }
    Consolidated identical input bits for $mux cell $procmux$790:
      Old ports: A=$procmux$787_Y, B=8'00000000, Y=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167
      New ports: A=$procmux$787_Y [0], B=1'0, Y=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0]
      New connections: $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7:1] = { $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [0] }
    Consolidated identical input bits for $mux cell $procmux$819:
      Old ports: A=$procmux$816_Y, B=8'00000000, Y=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170
      New ports: A=$procmux$816_Y [0], B=1'0, Y=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0]
      New connections: $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7:1] = { $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [0] }
    Consolidated identical input bits for $mux cell $procmux$845:
      Old ports: A=$procmux$842_Y, B=8'00000000, Y=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173
      New ports: A=$procmux$842_Y [0], B=1'0, Y=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0]
      New connections: $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7:1] = { $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [0] }
  Optimizing cells in module \DECODER.
Performed a total of 52 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 173 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 214 unused wires.

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DECODER..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DECODER.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$186 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$190 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$194 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$198 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$202 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$206 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$210 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm0$cpu/DECODER.v:87$214 (fmm0).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$187 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$191 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$195 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$199 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$203 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$207 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$211 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm1$cpu/DECODER.v:88$215 (fmm1).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$188 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$192 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$196 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$200 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$204 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$208 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$212 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm2$cpu/DECODER.v:89$216 (fmm2).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$189 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$193 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$197 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$201 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$205 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$209 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$213 (fmm3).
Removed top 29 address bits (of 32) from memory write port DECODER.$memwr$\fmm3$cpu/DECODER.v:90$217 (fmm3).
Removed top 31 bits (of 32) from port B of cell DECODER.$add$cpu/DECODER.v:59$64 ($add).
Removed top 28 bits (of 32) from port Y of cell DECODER.$add$cpu/DECODER.v:59$64 ($add).
Removed top 29 bits (of 32) from port B of cell DECODER.$lt$cpu/DECODER.v:136$177 ($lt).
Removed top 31 bits (of 32) from port B of cell DECODER.$add$cpu/DECODER.v:157$185 ($add).
Removed top 12 bits (of 32) from port Y of cell DECODER.$add$cpu/DECODER.v:157$185 ($add).
Removed top 1 bits (of 2) from port B of cell DECODER.$procmux$367_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell DECODER.$procmux$442_CMP0 ($eq).
Removed cell DECODER.$procmux$465 ($mux).
Removed cell DECODER.$procmux$468 ($mux).
Removed cell DECODER.$procmux$504 ($mux).
Removed cell DECODER.$procmux$540 ($mux).
Removed cell DECODER.$procmux$576 ($mux).
Removed cell DECODER.$procmux$612 ($mux).
Removed cell DECODER.$procmux$648 ($mux).
Removed cell DECODER.$procmux$684 ($mux).
Removed cell DECODER.$procmux$720 ($mux).
Removed cell DECODER.$procmux$764 ($mux).
Removed cell DECODER.$procmux$766 ($mux).
Removed cell DECODER.$procmux$769 ($mux).
Removed cell DECODER.$procmux$775 ($mux).
Removed cell DECODER.$procmux$777 ($mux).
Removed cell DECODER.$procmux$780 ($mux).
Removed cell DECODER.$procmux$795 ($mux).
Removed cell DECODER.$procmux$797 ($mux).
Removed cell DECODER.$procmux$800 ($mux).
Removed cell DECODER.$procmux$805 ($mux).
Removed cell DECODER.$procmux$807 ($mux).
Removed cell DECODER.$procmux$810 ($mux).
Removed cell DECODER.$procmux$823 ($mux).
Removed cell DECODER.$procmux$825 ($mux).
Removed cell DECODER.$procmux$828 ($mux).
Removed cell DECODER.$procmux$832 ($mux).
Removed cell DECODER.$procmux$834 ($mux).
Removed cell DECODER.$procmux$837 ($mux).
Removed cell DECODER.$procmux$848 ($mux).
Removed cell DECODER.$procmux$850 ($mux).
Removed cell DECODER.$procmux$853 ($mux).
Removed cell DECODER.$procmux$856 ($mux).
Removed cell DECODER.$procmux$858 ($mux).
Removed cell DECODER.$procmux$861 ($mux).
Removed cell DECODER.$procdff$906 ($dff).
Removed top 31 bits (of 32) from FF cell DECODER.$procdff$918 ($dff).
Removed top 30 bits (of 32) from FF cell DECODER.$procdff$939 ($dff).
Removed cell DECODER.$procdff$940 ($dff).
Removed top 7 bits (of 8) from FF cell DECODER.$procdff$941 ($dff).
Removed top 30 bits (of 32) from FF cell DECODER.$procdff$942 ($dff).
Removed top 29 bits (of 32) from FF cell DECODER.$procdff$954 ($dff).
Removed top 29 bits (of 32) from FF cell DECODER.$procdff$966 ($dff).
Removed top 29 bits (of 32) from FF cell DECODER.$procdff$978 ($dff).
Removed top 29 bits (of 32) from FF cell DECODER.$procdff$990 ($dff).
Removed top 7 bits (of 8) from FF cell DECODER.$procdff$1004 ($dff).
Removed top 7 bits (of 8) from FF cell DECODER.$procdff$1007 ($dff).
Removed top 7 bits (of 8) from FF cell DECODER.$procdff$1010 ($dff).
Removed top 7 bits (of 8) from FF cell DECODER.$procdff$1013 ($dff).
Removed top 1 bits (of 2) from FF cell DECODER.$procdff$942 ($dff).
Removed top 1 bits (of 3) from FF cell DECODER.$procdff$978 ($dff).
Removed top 2 bits (of 3) from FF cell DECODER.$procdff$990 ($dff).
Removed top 12 bits (of 32) from wire DECODER.$add$cpu/DECODER.v:157$185_Y.
Removed top 28 bits (of 32) from wire DECODER.$add$cpu/DECODER.v:59$64_Y.
Removed top 31 bits (of 32) from wire DECODER.$memwr$\fmm0$cpu/DECODER.v:87$13_ADDR.
Removed top 30 bits (of 32) from wire DECODER.$memwr$\fmm0$cpu/DECODER.v:87$17_ADDR.
Removed top 29 bits (of 32) from wire DECODER.$memwr$\fmm0$cpu/DECODER.v:87$25_ADDR.
Removed top 29 bits (of 32) from wire DECODER.$memwr$\fmm0$cpu/DECODER.v:87$29_ADDR.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 40 unused wires.

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module DECODER that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\fmm3$cpu/DECODER.v:58$60 ($memrd):
    Found 1 activation_patterns using ctrl signal $0\acki[0:0].
    No candidates found.
  Analyzing resource sharing options for $memrd$\fmm2$cpu/DECODER.v:56$61 ($memrd):
    Found 1 activation_patterns using ctrl signal $0\acki[0:0].
    No candidates found.
  Analyzing resource sharing options for $memrd$\fmm1$cpu/DECODER.v:55$62 ($memrd):
    Found 1 activation_patterns using ctrl signal $0\acki[0:0].
    No candidates found.
  Analyzing resource sharing options for $memrd$\fmm0$cpu/DECODER.v:54$63 ($memrd):
    Found 1 activation_patterns using ctrl signal $0\acki[0:0].
    No candidates found.

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$e1c82a84e92a7932c0517f1674dd41b9c2a7ad87\_90_lut_cmp_ for cells of type $lt.
No more expansions possible.

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 3 unused wires.

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module DECODER:
  creating $macc model for $add$cpu/DECODER.v:157$185 ($add).
  creating $macc model for $add$cpu/DECODER.v:59$64 ($add).
  creating $macc model for $add$cpu/DECODER.v:94$174 ($add).
  creating $macc model for $sub$cpu/DECODER.v:44$46 ($sub).
  creating $alu model for $macc $sub$cpu/DECODER.v:44$46.
  creating $alu model for $macc $add$cpu/DECODER.v:94$174.
  creating $alu model for $macc $add$cpu/DECODER.v:59$64.
  creating $alu model for $macc $add$cpu/DECODER.v:157$185.
  creating $alu cell for $add$cpu/DECODER.v:157$185: $auto$alumacc.cc:485:replace_alu$1031
  creating $alu cell for $add$cpu/DECODER.v:59$64: $auto$alumacc.cc:485:replace_alu$1034
  creating $alu cell for $add$cpu/DECODER.v:94$174: $auto$alumacc.cc:485:replace_alu$1037
  creating $alu cell for $sub$cpu/DECODER.v:44$46: $auto$alumacc.cc:485:replace_alu$1040
  created 4 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 8 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DECODER..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DECODER.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$918 ($dff) from module DECODER.
Removing $procdff$939 ($dff) from module DECODER.
Removing $procdff$954 ($dff) from module DECODER.
Removing $procdff$966 ($dff) from module DECODER.
Replaced 4 DFF cells.

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 12 unused wires.

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DECODER..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DECODER.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$186' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$190' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$194' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$198' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$202' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$206' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$210' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:87$214' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm0$cpu/DECODER.v:95$218' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$187' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$191' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$195' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$199' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$203' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$207' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$211' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:88$215' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm1$cpu/DECODER.v:99$219' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:104$220' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$188' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$192' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$196' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$200' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$204' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$208' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$212' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm2$cpu/DECODER.v:89$216' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:108$221' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$189' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$193' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$197' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$201' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$205' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$209' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$213' in module `\DECODER': merged $dff to cell.
Checking cell `$memwr$\fmm3$cpu/DECODER.v:90$217' in module `\DECODER': merged $dff to cell.
Checking cell `$memrd$\fmm0$cpu/DECODER.v:54$63' in module `\DECODER': no (compatible) $dff found.
Checking cell `$memrd$\fmm1$cpu/DECODER.v:55$62' in module `\DECODER': no (compatible) $dff found.
Checking cell `$memrd$\fmm2$cpu/DECODER.v:56$61' in module `\DECODER': no (compatible) $dff found.
Checking cell `$memrd$\fmm3$cpu/DECODER.v:58$60' in module `\DECODER': no (compatible) $dff found.

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 8 unused cells and 8 unused wires.

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory DECODER.fmm0 by address:
  New clock domain: negedge \clk
    Port 0 ($memwr$\fmm0$cpu/DECODER.v:87$186) has addr 3'000.
      Active bits: 11111111
    Port 1 ($memwr$\fmm0$cpu/DECODER.v:87$190) has addr 3'001.
      Active bits: 11111111
    Port 2 ($memwr$\fmm0$cpu/DECODER.v:87$194) has addr 3'010.
      Active bits: 11111111
    Port 3 ($memwr$\fmm0$cpu/DECODER.v:87$198) has addr 3'011.
      Active bits: 11111111
    Port 4 ($memwr$\fmm0$cpu/DECODER.v:87$202) has addr 3'100.
      Active bits: 11111111
    Port 5 ($memwr$\fmm0$cpu/DECODER.v:87$206) has addr 3'101.
      Active bits: 11111111
    Port 6 ($memwr$\fmm0$cpu/DECODER.v:87$210) has addr 3'110.
      Active bits: 11111111
    Port 7 ($memwr$\fmm0$cpu/DECODER.v:87$214) has addr 3'111.
      Active bits: 11111111
    Port 8 ($memwr$\fmm0$cpu/DECODER.v:95$218) has addr $0$memwr$\fmm0$cpu/DECODER.v:95$41_ADDR[2:0]$162.
      Active bits: 11111111
Consolidating write ports of memory DECODER.fmm1 by address:
  New clock domain: negedge \clk
    Port 0 ($memwr$\fmm1$cpu/DECODER.v:88$187) has addr 3'000.
      Active bits: 11111111
    Port 1 ($memwr$\fmm1$cpu/DECODER.v:88$191) has addr 3'001.
      Active bits: 11111111
    Port 2 ($memwr$\fmm1$cpu/DECODER.v:88$195) has addr 3'010.
      Active bits: 11111111
    Port 3 ($memwr$\fmm1$cpu/DECODER.v:88$199) has addr 3'011.
      Active bits: 11111111
    Port 4 ($memwr$\fmm1$cpu/DECODER.v:88$203) has addr 3'100.
      Active bits: 11111111
    Port 5 ($memwr$\fmm1$cpu/DECODER.v:88$207) has addr 3'101.
      Active bits: 11111111
    Port 6 ($memwr$\fmm1$cpu/DECODER.v:88$211) has addr 3'110.
      Active bits: 11111111
    Port 7 ($memwr$\fmm1$cpu/DECODER.v:88$215) has addr 3'111.
      Active bits: 11111111
    Port 8 ($memwr$\fmm1$cpu/DECODER.v:99$219) has addr \wp [2:0].
      Active bits: 11111111
Consolidating write ports of memory DECODER.fmm2 by address:
  New clock domain: negedge \clk
    Port 0 ($memwr$\fmm2$cpu/DECODER.v:89$188) has addr 3'000.
      Active bits: 11111111
    Port 1 ($memwr$\fmm2$cpu/DECODER.v:89$192) has addr 3'001.
      Active bits: 11111111
    Port 2 ($memwr$\fmm2$cpu/DECODER.v:89$196) has addr 3'010.
      Active bits: 11111111
    Port 3 ($memwr$\fmm2$cpu/DECODER.v:89$200) has addr 3'011.
      Active bits: 11111111
    Port 4 ($memwr$\fmm2$cpu/DECODER.v:89$204) has addr 3'100.
      Active bits: 11111111
    Port 5 ($memwr$\fmm2$cpu/DECODER.v:89$208) has addr 3'101.
      Active bits: 11111111
    Port 6 ($memwr$\fmm2$cpu/DECODER.v:89$212) has addr 3'110.
      Active bits: 11111111
    Port 7 ($memwr$\fmm2$cpu/DECODER.v:89$216) has addr 3'111.
      Active bits: 11111111
    Port 8 ($memwr$\fmm2$cpu/DECODER.v:104$220) has addr \wp [2:0].
      Active bits: 11111111
Consolidating write ports of memory DECODER.fmm3 by address:
  New clock domain: negedge \clk
    Port 0 ($memwr$\fmm3$cpu/DECODER.v:90$189) has addr 3'000.
      Active bits: 11111111
    Port 1 ($memwr$\fmm3$cpu/DECODER.v:90$193) has addr 3'001.
      Active bits: 11111111
    Port 2 ($memwr$\fmm3$cpu/DECODER.v:90$197) has addr 3'010.
      Active bits: 11111111
    Port 3 ($memwr$\fmm3$cpu/DECODER.v:90$201) has addr 3'011.
      Active bits: 11111111
    Port 4 ($memwr$\fmm3$cpu/DECODER.v:90$205) has addr 3'100.
      Active bits: 11111111
    Port 5 ($memwr$\fmm3$cpu/DECODER.v:90$209) has addr 3'101.
      Active bits: 11111111
    Port 6 ($memwr$\fmm3$cpu/DECODER.v:90$213) has addr 3'110.
      Active bits: 11111111
    Port 7 ($memwr$\fmm3$cpu/DECODER.v:90$217) has addr 3'111.
      Active bits: 11111111
    Port 8 ($memwr$\fmm3$cpu/DECODER.v:108$221) has addr \wp [2:0].
      Active bits: 11111111
Consolidating write ports of memory DECODER.fmm0 using sat-based resource sharing:
  Port 0 ($memwr$\fmm0$cpu/DECODER.v:87$186) on negedge \clk: considered
  Port 1 ($memwr$\fmm0$cpu/DECODER.v:87$190) on negedge \clk: considered
  Port 2 ($memwr$\fmm0$cpu/DECODER.v:87$194) on negedge \clk: considered
  Port 3 ($memwr$\fmm0$cpu/DECODER.v:87$198) on negedge \clk: considered
  Port 4 ($memwr$\fmm0$cpu/DECODER.v:87$202) on negedge \clk: considered
  Port 5 ($memwr$\fmm0$cpu/DECODER.v:87$206) on negedge \clk: considered
  Port 6 ($memwr$\fmm0$cpu/DECODER.v:87$210) on negedge \clk: considered
  Port 7 ($memwr$\fmm0$cpu/DECODER.v:87$214) on negedge \clk: considered
  Port 8 ($memwr$\fmm0$cpu/DECODER.v:95$218) on negedge \clk: considered
  Common input cone for all EN signals: 5 cells.
  Size of unconstrained SAT problem: 37 variables, 85 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  According to SAT solver sharing of port 3 with port 4 is not possible.
  According to SAT solver sharing of port 4 with port 5 is not possible.
  According to SAT solver sharing of port 5 with port 6 is not possible.
  According to SAT solver sharing of port 6 with port 7 is not possible.
  Merging port 7 into port 8.
Consolidating write ports of memory DECODER.fmm1 using sat-based resource sharing:
  Port 0 ($memwr$\fmm1$cpu/DECODER.v:88$187) on negedge \clk: considered
  Port 1 ($memwr$\fmm1$cpu/DECODER.v:88$191) on negedge \clk: considered
  Port 2 ($memwr$\fmm1$cpu/DECODER.v:88$195) on negedge \clk: considered
  Port 3 ($memwr$\fmm1$cpu/DECODER.v:88$199) on negedge \clk: considered
  Port 4 ($memwr$\fmm1$cpu/DECODER.v:88$203) on negedge \clk: considered
  Port 5 ($memwr$\fmm1$cpu/DECODER.v:88$207) on negedge \clk: considered
  Port 6 ($memwr$\fmm1$cpu/DECODER.v:88$211) on negedge \clk: considered
  Port 7 ($memwr$\fmm1$cpu/DECODER.v:88$215) on negedge \clk: considered
  Port 8 ($memwr$\fmm1$cpu/DECODER.v:99$219) on negedge \clk: considered
  Common input cone for all EN signals: 5 cells.
  Size of unconstrained SAT problem: 41 variables, 97 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  According to SAT solver sharing of port 3 with port 4 is not possible.
  According to SAT solver sharing of port 4 with port 5 is not possible.
  According to SAT solver sharing of port 5 with port 6 is not possible.
  According to SAT solver sharing of port 6 with port 7 is not possible.
  Merging port 7 into port 8.
Consolidating write ports of memory DECODER.fmm2 using sat-based resource sharing:
  Port 0 ($memwr$\fmm2$cpu/DECODER.v:89$188) on negedge \clk: considered
  Port 1 ($memwr$\fmm2$cpu/DECODER.v:89$192) on negedge \clk: considered
  Port 2 ($memwr$\fmm2$cpu/DECODER.v:89$196) on negedge \clk: considered
  Port 3 ($memwr$\fmm2$cpu/DECODER.v:89$200) on negedge \clk: considered
  Port 4 ($memwr$\fmm2$cpu/DECODER.v:89$204) on negedge \clk: considered
  Port 5 ($memwr$\fmm2$cpu/DECODER.v:89$208) on negedge \clk: considered
  Port 6 ($memwr$\fmm2$cpu/DECODER.v:89$212) on negedge \clk: considered
  Port 7 ($memwr$\fmm2$cpu/DECODER.v:89$216) on negedge \clk: considered
  Port 8 ($memwr$\fmm2$cpu/DECODER.v:104$220) on negedge \clk: considered
  Common input cone for all EN signals: 5 cells.
  Size of unconstrained SAT problem: 41 variables, 97 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  According to SAT solver sharing of port 3 with port 4 is not possible.
  According to SAT solver sharing of port 4 with port 5 is not possible.
  According to SAT solver sharing of port 5 with port 6 is not possible.
  According to SAT solver sharing of port 6 with port 7 is not possible.
  Merging port 7 into port 8.
Consolidating write ports of memory DECODER.fmm3 using sat-based resource sharing:
  Port 0 ($memwr$\fmm3$cpu/DECODER.v:90$189) on negedge \clk: considered
  Port 1 ($memwr$\fmm3$cpu/DECODER.v:90$193) on negedge \clk: considered
  Port 2 ($memwr$\fmm3$cpu/DECODER.v:90$197) on negedge \clk: considered
  Port 3 ($memwr$\fmm3$cpu/DECODER.v:90$201) on negedge \clk: considered
  Port 4 ($memwr$\fmm3$cpu/DECODER.v:90$205) on negedge \clk: considered
  Port 5 ($memwr$\fmm3$cpu/DECODER.v:90$209) on negedge \clk: considered
  Port 6 ($memwr$\fmm3$cpu/DECODER.v:90$213) on negedge \clk: considered
  Port 7 ($memwr$\fmm3$cpu/DECODER.v:90$217) on negedge \clk: considered
  Port 8 ($memwr$\fmm3$cpu/DECODER.v:108$221) on negedge \clk: considered
  Common input cone for all EN signals: 5 cells.
  Size of unconstrained SAT problem: 41 variables, 97 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  According to SAT solver sharing of port 3 with port 4 is not possible.
  According to SAT solver sharing of port 4 with port 5 is not possible.
  According to SAT solver sharing of port 5 with port 6 is not possible.
  According to SAT solver sharing of port 6 with port 7 is not possible.
  Merging port 7 into port 8.

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\fmm0' in module `\DECODER':
  $memwr$\fmm0$cpu/DECODER.v:87$186 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$190 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$194 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$198 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$202 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$206 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:87$210 ($memwr)
  $memwr$\fmm0$cpu/DECODER.v:95$218 ($memwr)
  $memrd$\fmm0$cpu/DECODER.v:54$63 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\fmm1' in module `\DECODER':
  $memwr$\fmm1$cpu/DECODER.v:88$187 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$191 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$195 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$199 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$203 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$207 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:88$211 ($memwr)
  $memwr$\fmm1$cpu/DECODER.v:99$219 ($memwr)
  $memrd$\fmm1$cpu/DECODER.v:55$62 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\fmm2' in module `\DECODER':
  $memwr$\fmm2$cpu/DECODER.v:89$188 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$192 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$196 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$200 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$204 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$208 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:89$212 ($memwr)
  $memwr$\fmm2$cpu/DECODER.v:104$220 ($memwr)
  $memrd$\fmm2$cpu/DECODER.v:56$61 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\fmm3' in module `\DECODER':
  $memwr$\fmm3$cpu/DECODER.v:90$189 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$193 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$197 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$201 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$205 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$209 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:90$213 ($memwr)
  $memwr$\fmm3$cpu/DECODER.v:108$221 ($memwr)
  $memrd$\fmm3$cpu/DECODER.v:58$60 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing DECODER.fmm0:
  Properties: ports=9 bits=64 rports=1 wports=8 dbits=8 abits=3 words=8
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=248 dwaste=8 bwaste=4032 waste=4032 efficiency=1
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=504 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1016 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2040 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing DECODER.fmm1:
  Properties: ports=9 bits=64 rports=1 wports=8 dbits=8 abits=3 words=8
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=248 dwaste=8 bwaste=4032 waste=4032 efficiency=1
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=504 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1016 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2040 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing DECODER.fmm2:
  Properties: ports=9 bits=64 rports=1 wports=8 dbits=8 abits=3 words=8
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=248 dwaste=8 bwaste=4032 waste=4032 efficiency=1
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=504 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1016 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2040 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.
Processing DECODER.fmm3:
  Properties: ports=9 bits=64 rports=1 wports=8 dbits=8 abits=3 words=8
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=248 dwaste=8 bwaste=4032 waste=4032 efficiency=1
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=504 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1016 dwaste=0 bwaste=4064 waste=4064 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min efficiency 2' not met.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2040 dwaste=0 bwaste=4080 waste=4080 efficiency=0
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 9 unused wires.

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \fmm0 in module \DECODER:
  created 8 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 64 write mux blocks.
Mapping memory cell \fmm1 in module \DECODER:
  created 8 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 64 write mux blocks.
Mapping memory cell \fmm2 in module \DECODER:
  created 8 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 64 write mux blocks.
Mapping memory cell \fmm3 in module \DECODER:
  created 8 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 64 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DECODER..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$1050: $0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7] -> 1'1
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$1058: $0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7] -> 1'1
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$1066: $0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7] -> 1'1
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$1074: $0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7] -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DECODER.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 0 unused cells and 564 unused wires.

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.

2.32. Executing ICE40_OPT pass (performing simple optimizations).

2.32.1. Running ICE40 specific optimizations.

2.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 12 cells.

2.32.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 57 unused cells and 160 unused wires.

2.32.6. Rerunning OPT passes. (Removed registers in this run.)

2.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) DECODER.$auto$alumacc.cc:485:replace_alu$1031.slice[0].carry: CO=\adr [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) DECODER.$auto$alumacc.cc:485:replace_alu$1034.slice[0].carry: CO=\rp [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) DECODER.$auto$alumacc.cc:485:replace_alu$1037.slice[0].carry: CO=\wp [0]

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.32.12. Rerunning OPT passes. (Removed registers in this run.)

2.32.13. Running ICE40 specific optimizations.

2.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.32.18. Finished OPT passes. (There is nothing left to do.)

2.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module DECODER:
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2597 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [0] -> \fmm1[0] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2598 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [1] -> \fmm1[0] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2599 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [2] -> \fmm1[0] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2600 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [3] -> \fmm1[0] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2601 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [4] -> \fmm1[0] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2602 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [5] -> \fmm1[0] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2603 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [6] -> \fmm1[0] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2604 to $_DFFE_NP_ for $memory\fmm1$wrmux[0][7][0]$y$1641 [7] -> \fmm1[0] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2605 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [0] -> \fmm2[0] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2606 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [1] -> \fmm2[0] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2607 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [2] -> \fmm2[0] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2608 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [3] -> \fmm2[0] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2609 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [4] -> \fmm2[0] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2610 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [5] -> \fmm2[0] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2611 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [6] -> \fmm2[0] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2612 to $_DFFE_NP_ for $memory\fmm2$wrmux[0][7][0]$y$1970 [7] -> \fmm2[0] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2613 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [0] -> \fmm3[0] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2614 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [1] -> \fmm3[0] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2615 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [2] -> \fmm3[0] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2616 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [3] -> \fmm3[0] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2617 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [4] -> \fmm3[0] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2618 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [5] -> \fmm3[0] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2619 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [6] -> \fmm3[0] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2620 to $_DFFE_NP_ for $memory\fmm3$wrmux[0][7][0]$y$2299 [7] -> \fmm3[0] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2674 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [0] -> \fmm2[1] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2675 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [1] -> \fmm2[1] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2676 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [2] -> \fmm2[1] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2677 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [3] -> \fmm2[1] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2678 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [4] -> \fmm2[1] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2679 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [5] -> \fmm2[1] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2680 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [6] -> \fmm2[1] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2681 to $_DFFE_NP_ for $memory\fmm2$wrmux[1][7][0]$y$2006 [7] -> \fmm2[1] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2713 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [0] -> \fmm2[2] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2714 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [1] -> \fmm2[2] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2715 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [2] -> \fmm2[2] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2716 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [3] -> \fmm2[2] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2717 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [4] -> \fmm2[2] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2718 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [5] -> \fmm2[2] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2719 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [6] -> \fmm2[2] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2720 to $_DFFE_NP_ for $memory\fmm2$wrmux[2][7][0]$y$2044 [7] -> \fmm2[2] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2733 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [0] -> \fmm1[2] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2734 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [1] -> \fmm1[2] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2735 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [2] -> \fmm1[2] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2736 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [3] -> \fmm1[2] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2737 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [4] -> \fmm1[2] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2738 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [5] -> \fmm1[2] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2739 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [6] -> \fmm1[2] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2740 to $_DFFE_NP_ for $memory\fmm1$wrmux[2][7][0]$y$1715 [7] -> \fmm1[2] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2760 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [0] -> \fmm0[0] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2761 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [1] -> \fmm0[0] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2762 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [2] -> \fmm0[0] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2763 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [3] -> \fmm0[0] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2764 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [4] -> \fmm0[0] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2765 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [5] -> \fmm0[0] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2766 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [6] -> \fmm0[0] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2767 to $_DFFE_NP_ for $memory\fmm0$wrmux[0][7][0]$y$1186 [7] -> \fmm0[0] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2812 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [0] -> \fmm0[6] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2813 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [1] -> \fmm0[6] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2814 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [2] -> \fmm0[6] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2815 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [3] -> \fmm0[6] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2816 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [4] -> \fmm0[6] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2817 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [5] -> \fmm0[6] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2818 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [6] -> \fmm0[6] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2819 to $_DFFE_NP_ for $memory\fmm0$wrmux[6][7][0]$y$1514 [7] -> \fmm0[6] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2868 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [0] -> \fmm0[3] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2869 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [1] -> \fmm0[3] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2870 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [2] -> \fmm0[3] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2871 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [3] -> \fmm0[3] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2872 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [4] -> \fmm0[3] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2873 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [5] -> \fmm0[3] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2874 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [6] -> \fmm0[3] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2875 to $_DFFE_NP_ for $memory\fmm0$wrmux[3][7][0]$y$1348 [7] -> \fmm0[3] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2876 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [0] -> \fmm0[7] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2877 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [1] -> \fmm0[7] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2878 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [2] -> \fmm0[7] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2879 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [3] -> \fmm0[7] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2880 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [4] -> \fmm0[7] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2881 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [5] -> \fmm0[7] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2882 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [6] -> \fmm0[7] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2883 to $_DFFE_NP_ for $memory\fmm0$wrmux[7][7][0]$y$1562 [7] -> \fmm0[7] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2884 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [0] -> \fmm2[3] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2885 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [1] -> \fmm2[3] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2886 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [2] -> \fmm2[3] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2887 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [3] -> \fmm2[3] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2888 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [4] -> \fmm2[3] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2889 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [5] -> \fmm2[3] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2890 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [6] -> \fmm2[3] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2891 to $_DFFE_NP_ for $memory\fmm2$wrmux[3][7][0]$y$2078 [7] -> \fmm2[3] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2892 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [0] -> \fmm2[4] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2893 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [1] -> \fmm2[4] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2894 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [2] -> \fmm2[4] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2895 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [3] -> \fmm2[4] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2896 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [4] -> \fmm2[4] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2897 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [5] -> \fmm2[4] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2898 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [6] -> \fmm2[4] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2899 to $_DFFE_NP_ for $memory\fmm2$wrmux[4][7][0]$y$2116 [7] -> \fmm2[4] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2900 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [0] -> \fmm2[5] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2901 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [1] -> \fmm2[5] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2902 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [2] -> \fmm2[5] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2903 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [3] -> \fmm2[5] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2904 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [4] -> \fmm2[5] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2905 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [5] -> \fmm2[5] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2906 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [6] -> \fmm2[5] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2907 to $_DFFE_NP_ for $memory\fmm2$wrmux[5][7][0]$y$2150 [7] -> \fmm2[5] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2908 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [0] -> \fmm2[6] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2909 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [1] -> \fmm2[6] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2910 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [2] -> \fmm2[6] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2911 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [3] -> \fmm2[6] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2912 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [4] -> \fmm2[6] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2913 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [5] -> \fmm2[6] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2914 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [6] -> \fmm2[6] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$2915 to $_DFFE_NP_ for $memory\fmm2$wrmux[6][7][0]$y$2186 [7] -> \fmm2[6] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3177 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [0] -> \fmm1[1] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3178 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [1] -> \fmm1[1] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3179 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [2] -> \fmm1[1] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3180 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [3] -> \fmm1[1] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3181 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [4] -> \fmm1[1] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3182 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [5] -> \fmm1[1] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3183 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [6] -> \fmm1[1] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3184 to $_DFFE_NP_ for $memory\fmm1$wrmux[1][7][0]$y$1677 [7] -> \fmm1[1] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3342 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [0] -> \fmm1[7] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3343 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [1] -> \fmm1[7] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3344 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [2] -> \fmm1[7] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3345 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [3] -> \fmm1[7] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3346 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [4] -> \fmm1[7] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3347 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [5] -> \fmm1[7] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3348 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [6] -> \fmm1[7] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3349 to $_DFFE_NP_ for $memory\fmm1$wrmux[7][7][0]$y$1891 [7] -> \fmm1[7] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3352 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [0] -> \fmm0[2] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3353 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [1] -> \fmm0[2] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3354 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [2] -> \fmm0[2] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3355 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [3] -> \fmm0[2] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3356 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [4] -> \fmm0[2] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3357 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [5] -> \fmm0[2] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3358 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [6] -> \fmm0[2] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3359 to $_DFFE_NP_ for $memory\fmm0$wrmux[2][7][0]$y$1300 [7] -> \fmm0[2] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3373 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [0] -> \fmm1[6] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3374 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [1] -> \fmm1[6] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3375 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [2] -> \fmm1[6] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3376 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [3] -> \fmm1[6] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3377 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [4] -> \fmm1[6] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3378 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [5] -> \fmm1[6] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3379 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [6] -> \fmm1[6] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3380 to $_DFFE_NP_ for $memory\fmm1$wrmux[6][7][0]$y$1857 [7] -> \fmm1[6] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3381 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [0] -> \fmm0[5] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3382 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [1] -> \fmm0[5] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3383 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [2] -> \fmm0[5] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3384 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [3] -> \fmm0[5] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3385 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [4] -> \fmm0[5] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3386 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [5] -> \fmm0[5] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3387 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [6] -> \fmm0[5] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3388 to $_DFFE_NP_ for $memory\fmm0$wrmux[5][7][0]$y$1456 [7] -> \fmm0[5] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3391 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [0] -> \fmm1[5] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3392 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [1] -> \fmm1[5] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3393 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [2] -> \fmm1[5] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3394 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [3] -> \fmm1[5] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3395 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [4] -> \fmm1[5] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3396 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [5] -> \fmm1[5] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3397 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [6] -> \fmm1[5] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3398 to $_DFFE_NP_ for $memory\fmm1$wrmux[5][7][0]$y$1821 [7] -> \fmm1[5] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3399 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [0] -> \fmm0[4] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3400 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [1] -> \fmm0[4] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3401 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [2] -> \fmm0[4] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3402 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [3] -> \fmm0[4] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3403 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [4] -> \fmm0[4] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3404 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [5] -> \fmm0[4] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3405 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [6] -> \fmm0[4] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3406 to $_DFFE_NP_ for $memory\fmm0$wrmux[4][7][0]$y$1408 [7] -> \fmm0[4] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3417 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [0] -> \fmm1[4] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3418 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [1] -> \fmm1[4] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3419 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [2] -> \fmm1[4] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3420 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [3] -> \fmm1[4] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3421 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [4] -> \fmm1[4] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3422 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [5] -> \fmm1[4] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3423 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [6] -> \fmm1[4] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3424 to $_DFFE_NP_ for $memory\fmm1$wrmux[4][7][0]$y$1787 [7] -> \fmm1[4] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3431 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [0] -> \fmm1[3] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3432 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [1] -> \fmm1[3] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3433 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [2] -> \fmm1[3] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3434 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [3] -> \fmm1[3] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3435 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [4] -> \fmm1[3] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3436 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [5] -> \fmm1[3] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3437 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [6] -> \fmm1[3] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3438 to $_DFFE_NP_ for $memory\fmm1$wrmux[3][7][0]$y$1749 [7] -> \fmm1[3] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3499 to $_DFFE_PP_ for $0\req[0:0] -> \req.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3500 to $_DFFE_PP_ for $0\adr[19:0] [0] -> \adr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3501 to $_DFFE_PP_ for $0\adr[19:0] [1] -> \adr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3502 to $_DFFE_PP_ for $0\adr[19:0] [2] -> \adr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3503 to $_DFFE_PP_ for $0\adr[19:0] [3] -> \adr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3504 to $_DFFE_PP_ for $0\adr[19:0] [4] -> \adr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3505 to $_DFFE_PP_ for $0\adr[19:0] [5] -> \adr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3506 to $_DFFE_PP_ for $0\adr[19:0] [6] -> \adr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3507 to $_DFFE_PP_ for $0\adr[19:0] [7] -> \adr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3508 to $_DFFE_PP_ for $0\adr[19:0] [8] -> \adr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3509 to $_DFFE_PP_ for $0\adr[19:0] [9] -> \adr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3510 to $_DFFE_PP_ for $0\adr[19:0] [10] -> \adr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3511 to $_DFFE_PP_ for $0\adr[19:0] [11] -> \adr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3512 to $_DFFE_PP_ for $0\adr[19:0] [12] -> \adr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3513 to $_DFFE_PP_ for $0\adr[19:0] [13] -> \adr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3514 to $_DFFE_PP_ for $0\adr[19:0] [14] -> \adr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3515 to $_DFFE_PP_ for $0\adr[19:0] [15] -> \adr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3516 to $_DFFE_PP_ for $0\adr[19:0] [16] -> \adr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3517 to $_DFFE_PP_ for $0\adr[19:0] [17] -> \adr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3518 to $_DFFE_PP_ for $0\adr[19:0] [18] -> \adr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3519 to $_DFFE_PP_ for $0\adr[19:0] [19] -> \adr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3528 to $_DFFE_PP_ for $0\data_r[15:0] [8] -> \data_r [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3529 to $_DFFE_PP_ for $0\data_r[15:0] [9] -> \data_r [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3530 to $_DFFE_PP_ for $0\data_r[15:0] [10] -> \data_r [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3531 to $_DFFE_PP_ for $0\data_r[15:0] [11] -> \data_r [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3532 to $_DFFE_PP_ for $0\data_r[15:0] [12] -> \data_r [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3533 to $_DFFE_PP_ for $0\data_r[15:0] [13] -> \data_r [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3534 to $_DFFE_PP_ for $0\data_r[15:0] [14] -> \data_r [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3535 to $_DFFE_PP_ for $0\data_r[15:0] [15] -> \data_r [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3536 to $_DFFE_PP_ for $0\cur[7:0] [0] -> \cur [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3537 to $_DFFE_PP_ for $0\cur[7:0] [1] -> \cur [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3538 to $_DFFE_PP_ for $0\cur[7:0] [2] -> \cur [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3539 to $_DFFE_PP_ for $0\cur[7:0] [3] -> \cur [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3540 to $_DFFE_PP_ for $0\cur[7:0] [4] -> \cur [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3541 to $_DFFE_PP_ for $0\cur[7:0] [5] -> \cur [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3542 to $_DFFE_PP_ for $0\cur[7:0] [6] -> \cur [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3543 to $_DFFE_PP_ for $0\cur[7:0] [7] -> \cur [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3544 to $_DFFE_PP_ for $0\fsm1[1:0] [0] -> \fsm1 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3545 to $_DFFE_PP_ for $0\fsm1[1:0] [1] -> \fsm1 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3546 to $_DFFE_PP_ for $0\active[0:0] -> \active.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3547 to $_DFFE_PP_ for $0\flush[0:0] -> \flush.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3548 to $_DFFE_PP_ for $0\ignoreAck[0:0] -> \ignoreAck.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3549 to $_DFFE_PP_ for $0\fsm2[1:0] [0] -> \fsm2 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3550 to $_DFFE_PP_ for $0\fsm2[1:0] [1] -> \fsm2 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3551 to $_DFFE_PP_ for $0\fsm2_next[1:0] [0] -> \fsm2_next [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3552 to $_DFFE_PP_ for $0\fsm2_next[1:0] [1] -> \fsm2_next [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3553 to $_DFFE_NP_ for $0\wp[3:0] [0] -> \wp [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3554 to $_DFFE_NP_ for $0\wp[3:0] [1] -> \wp [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3555 to $_DFFE_NP_ for $0\wp[3:0] [2] -> \wp [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3556 to $_DFFE_NP_ for $0\wp[3:0] [3] -> \wp [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3557 to $_DFFE_NP_ for $0\fsm1_next[1:0] [0] -> \fsm1_next [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3558 to $_DFFE_NP_ for $0\fsm1_next[1:0] [1] -> \fsm1_next [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3559 to $_DFFE_NP_ for $0\szw[0:0] -> \szw.
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3571 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [0] -> \fmm0[1] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3572 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [1] -> \fmm0[1] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3573 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [2] -> \fmm0[1] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3574 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [3] -> \fmm0[1] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3575 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [4] -> \fmm0[1] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3576 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [5] -> \fmm0[1] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3577 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [6] -> \fmm0[1] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3578 to $_DFFE_NP_ for $memory\fmm0$wrmux[1][7][0]$y$1240 [7] -> \fmm0[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3611 to $_DFFE_PP_ for $0\instr[31:0] [0] -> \instr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3612 to $_DFFE_PP_ for $0\instr[31:0] [1] -> \instr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3613 to $_DFFE_PP_ for $0\instr[31:0] [2] -> \instr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3614 to $_DFFE_PP_ for $0\instr[31:0] [3] -> \instr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3615 to $_DFFE_PP_ for $0\instr[31:0] [4] -> \instr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3616 to $_DFFE_PP_ for $0\instr[31:0] [5] -> \instr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3617 to $_DFFE_PP_ for $0\instr[31:0] [6] -> \instr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3618 to $_DFFE_PP_ for $0\instr[31:0] [7] -> \instr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3619 to $_DFFE_PP_ for $0\instr[31:0] [8] -> \instr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3620 to $_DFFE_PP_ for $0\instr[31:0] [9] -> \instr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3621 to $_DFFE_PP_ for $0\instr[31:0] [10] -> \instr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3622 to $_DFFE_PP_ for $0\instr[31:0] [11] -> \instr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3623 to $_DFFE_PP_ for $0\instr[31:0] [12] -> \instr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3624 to $_DFFE_PP_ for $0\instr[31:0] [13] -> \instr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3625 to $_DFFE_PP_ for $0\instr[31:0] [14] -> \instr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3626 to $_DFFE_PP_ for $0\instr[31:0] [15] -> \instr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3627 to $_DFFE_PP_ for $0\instr[31:0] [16] -> \instr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3628 to $_DFFE_PP_ for $0\instr[31:0] [17] -> \instr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3629 to $_DFFE_PP_ for $0\instr[31:0] [18] -> \instr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3630 to $_DFFE_PP_ for $0\instr[31:0] [19] -> \instr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3631 to $_DFFE_PP_ for $0\instr[31:0] [20] -> \instr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3632 to $_DFFE_PP_ for $0\instr[31:0] [21] -> \instr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3633 to $_DFFE_PP_ for $0\instr[31:0] [22] -> \instr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3634 to $_DFFE_PP_ for $0\instr[31:0] [23] -> \instr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3635 to $_DFFE_PP_ for $0\instr[31:0] [24] -> \instr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3636 to $_DFFE_PP_ for $0\instr[31:0] [25] -> \instr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3637 to $_DFFE_PP_ for $0\instr[31:0] [26] -> \instr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3638 to $_DFFE_PP_ for $0\instr[31:0] [27] -> \instr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3639 to $_DFFE_PP_ for $0\instr[31:0] [28] -> \instr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3640 to $_DFFE_PP_ for $0\instr[31:0] [29] -> \instr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3641 to $_DFFE_PP_ for $0\instr[31:0] [30] -> \instr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3642 to $_DFFE_PP_ for $0\instr[31:0] [31] -> \instr [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3643 to $_DFFE_PP_ for $0\rp[3:0] [0] -> \rp [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3644 to $_DFFE_PP_ for $0\rp[3:0] [1] -> \rp [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3645 to $_DFFE_PP_ for $0\rp[3:0] [2] -> \rp [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3646 to $_DFFE_PP_ for $0\rp[3:0] [3] -> \rp [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3647 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [0] -> \fmm2[7] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3648 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [1] -> \fmm2[7] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3649 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [2] -> \fmm2[7] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3650 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [3] -> \fmm2[7] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3651 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [4] -> \fmm2[7] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3652 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [5] -> \fmm2[7] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3653 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [6] -> \fmm2[7] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3654 to $_DFFE_NP_ for $memory\fmm2$wrmux[7][7][0]$y$2220 [7] -> \fmm2[7] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3854 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [0] -> \fmm3[1] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3855 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [1] -> \fmm3[1] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3856 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [2] -> \fmm3[1] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3857 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [3] -> \fmm3[1] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3858 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [4] -> \fmm3[1] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3859 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [5] -> \fmm3[1] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3860 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [6] -> \fmm3[1] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3861 to $_DFFE_NP_ for $memory\fmm3$wrmux[1][7][0]$y$2335 [7] -> \fmm3[1] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3862 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [0] -> \fmm3[2] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3863 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [1] -> \fmm3[2] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3864 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [2] -> \fmm3[2] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3865 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [3] -> \fmm3[2] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3866 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [4] -> \fmm3[2] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3867 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [5] -> \fmm3[2] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3868 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [6] -> \fmm3[2] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3869 to $_DFFE_NP_ for $memory\fmm3$wrmux[2][7][0]$y$2373 [7] -> \fmm3[2] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3870 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [0] -> \fmm3[3] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3871 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [1] -> \fmm3[3] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3872 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [2] -> \fmm3[3] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3873 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [3] -> \fmm3[3] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3874 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [4] -> \fmm3[3] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3875 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [5] -> \fmm3[3] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3876 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [6] -> \fmm3[3] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3877 to $_DFFE_NP_ for $memory\fmm3$wrmux[3][7][0]$y$2407 [7] -> \fmm3[3] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3878 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [0] -> \fmm3[4] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3879 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [1] -> \fmm3[4] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3880 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [2] -> \fmm3[4] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3881 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [3] -> \fmm3[4] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3882 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [4] -> \fmm3[4] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3883 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [5] -> \fmm3[4] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3884 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [6] -> \fmm3[4] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3885 to $_DFFE_NP_ for $memory\fmm3$wrmux[4][7][0]$y$2445 [7] -> \fmm3[4] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3886 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [0] -> \fmm3[5] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3887 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [1] -> \fmm3[5] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3888 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [2] -> \fmm3[5] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3889 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [3] -> \fmm3[5] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3890 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [4] -> \fmm3[5] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3891 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [5] -> \fmm3[5] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3892 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [6] -> \fmm3[5] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3893 to $_DFFE_NP_ for $memory\fmm3$wrmux[5][7][0]$y$2479 [7] -> \fmm3[5] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3894 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [0] -> \fmm3[6] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3895 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [1] -> \fmm3[6] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3896 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [2] -> \fmm3[6] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3897 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [3] -> \fmm3[6] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3898 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [4] -> \fmm3[6] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3899 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [5] -> \fmm3[6] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3900 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [6] -> \fmm3[6] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3901 to $_DFFE_NP_ for $memory\fmm3$wrmux[6][7][0]$y$2515 [7] -> \fmm3[6] [7].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3902 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [0] -> \fmm3[7] [0].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3903 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [1] -> \fmm3[7] [1].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3904 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [2] -> \fmm3[7] [2].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3905 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [3] -> \fmm3[7] [3].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3906 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [4] -> \fmm3[7] [4].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3907 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [5] -> \fmm3[7] [5].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3908 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [6] -> \fmm3[7] [6].
  converting $_DFF_N_ cell $auto$simplemap.cc:420:simplemap_dff$3909 to $_DFFE_NP_ for $memory\fmm3$wrmux[7][7][0]$y$2549 [7] -> \fmm3[7] [7].

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_NP_ for cells of type $_DFFE_NP_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping DECODER.$auto$alumacc.cc:485:replace_alu$1031.slice[0].carry ($lut).
Mapping DECODER.$auto$alumacc.cc:485:replace_alu$1034.slice[0].carry ($lut).
Mapping DECODER.$auto$alumacc.cc:485:replace_alu$1037.slice[0].carry ($lut).

2.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in DECODER.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3499 (SB_DFFE): \req = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3528 (SB_DFFE): \data_r [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3529 (SB_DFFE): \data_r [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3530 (SB_DFFE): \data_r [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3531 (SB_DFFE): \data_r [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3532 (SB_DFFE): \data_r [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3533 (SB_DFFE): \data_r [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3534 (SB_DFFE): \data_r [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3535 (SB_DFFE): \data_r [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3544 (SB_DFFE): \fsm1 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3546 (SB_DFFE): \active = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3548 (SB_DFFE): \ignoreAck = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3545 (SB_DFFE): \fsm1 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3549 (SB_DFFE): \fsm2 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3550 (SB_DFFE): \fsm2 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3551 (SB_DFFE): \fsm2_next [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3552 (SB_DFFE): \fsm2_next [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3554 (SB_DFFNE): \wp [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3555 (SB_DFFNE): \wp [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3553 (SB_DFFNE): \wp [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3556 (SB_DFFNE): \wp [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3557 (SB_DFFNE): \fsm1_next [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3558 (SB_DFFNE): \fsm1_next [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3644 (SB_DFFE): \rp [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3645 (SB_DFFE): \rp [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3643 (SB_DFFE): \rp [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3646 (SB_DFFE): \rp [3] = 0

2.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in DECODER.
  Merging $auto$simplemap.cc:277:simplemap_mux$2672 (A=1'0, B=\cur [7], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3909 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3311 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2598 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3312 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2599 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3313 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2600 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3314 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2601 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3315 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2602 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3316 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2603 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3317 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2604 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3726 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2606 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3727 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2607 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3728 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2608 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3729 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2609 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3730 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2610 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3731 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2611 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3732 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2612 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3981 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2614 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3725 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[0][7][0]$y$1968) into $auto$simplemap.cc:420:simplemap_dff$2605 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3982 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2615 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3983 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2616 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3984 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2617 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3985 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2618 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3986 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2619 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3987 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2620 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3744 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2675 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2989 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3378 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3745 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2676 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3746 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2677 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3747 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2678 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3748 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2679 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3749 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2680 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3750 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2681 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3409 (A=1'0, B=\cur [0], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3647 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3764 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2715 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2784 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2767 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3743 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[1][7][0]$y$2004) into $auto$simplemap.cc:420:simplemap_dff$2674 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3980 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[0][7][0]$y$2297) into $auto$simplemap.cc:420:simplemap_dff$2613 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3762 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2713 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3763 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2714 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3219 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3423 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3799 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2892 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3766 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2717 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3602 (A=1'0, B=\cur [3], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3345 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3606 (A=1'0, B=\cur [7], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3349 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3603 (A=1'0, B=\cur [4], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3346 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3604 (A=1'0, B=\cur [5], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3347 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3256 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2737 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3257 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2738 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3258 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2739 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2988 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3377 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2631 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3358 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2629 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3356 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2779 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2762 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2780 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2763 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2626 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3353 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2782 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2765 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3218 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3422 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2783 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2766 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2987 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3376 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2985 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3374 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3262 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2814 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2986 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3375 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3264 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2816 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3265 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2817 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3824 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2907 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3267 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2819 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2991 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3380 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2657 (A=1'0, B=\cur [3], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2879 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3582 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3383 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3583 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3384 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3781 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2885 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3192 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3398 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2655 (A=1'0, B=\cur [1], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2877 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2642 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2868 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3784 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2888 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3587 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3388 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3186 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3392 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3787 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2891 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3188 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3394 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3189 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3395 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3190 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3396 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2654 (A=1'0, B=\cur [0], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2876 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3191 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3397 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3215 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3419 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2649 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2875 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3785 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2889 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3803 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2896 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3563 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3402 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3564 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3403 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3780 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2884 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3235 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3433 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3566 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3405 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3567 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3406 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3804 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2897 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3234 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3432 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3233 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3431 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2643 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2869 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3769 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2720 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3581 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3382 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2646 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2872 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2661 (A=1'0, B=\cur [7], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2883 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2647 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2873 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3585 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3386 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3837 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2909 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3216 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3420 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3817 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2900 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3217 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3421 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3220 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3424 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3840 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2912 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3841 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2913 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3842 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2914 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3584 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3385 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3767 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2718 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3259 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2740 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3580 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3381 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3560 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3399 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3293 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3179 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3294 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3180 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3213 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3417 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3237 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3435 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3296 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3182 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3266 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2818 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3836 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [0], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2908 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2630 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3357 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2628 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3355 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3254 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2735 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3255 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2736 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3260 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2812 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3253 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2734 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3599 (A=1'0, B=\cur [0], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3342 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2781 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2764 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2632 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3359 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3601 (A=1'0, B=\cur [2], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3344 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2778 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2761 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2777 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[0][7][0]$y$1184) into $auto$simplemap.cc:420:simplemap_dff$2760 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2795 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3571 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2625 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [0], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3352 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3261 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2813 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3263 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[6][7][0]$y$1512) into $auto$simplemap.cc:420:simplemap_dff$2815 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3605 (A=1'0, B=\cur [6], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3348 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3291 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3177 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2990 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3379 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3586 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[5][7][0]$y$1454) into $auto$simplemap.cc:420:simplemap_dff$3387 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2644 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2870 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2984 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[6][7][0]$y$1855) into $auto$simplemap.cc:420:simplemap_dff$3373 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2645 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2871 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3187 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [2], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3393 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2660 (A=1'0, B=\cur [6], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2882 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3843 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2915 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2648 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[3][7][0]$y$1346) into $auto$simplemap.cc:420:simplemap_dff$2874 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2656 (A=1'0, B=\cur [2], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2878 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3562 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3401 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3292 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3178 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2658 (A=1'0, B=\cur [4], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2880 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2659 (A=1'0, B=\cur [5], S=$0$memwr$\fmm0$cpu/DECODER.v:95$41_EN[7:0]$164 [7]) into $auto$simplemap.cc:420:simplemap_dff$2881 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3565 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3404 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3802 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2895 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3214 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [1], S=$memory\fmm1$wren[4][7][0]$y$1785) into $auto$simplemap.cc:420:simplemap_dff$3418 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3782 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2886 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3561 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[4][7][0]$y$1406) into $auto$simplemap.cc:420:simplemap_dff$3400 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3185 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[5][7][0]$y$1819) into $auto$simplemap.cc:420:simplemap_dff$3391 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3783 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2887 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3786 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[3][7][0]$y$2076) into $auto$simplemap.cc:420:simplemap_dff$2890 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3806 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [7], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2899 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3800 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2893 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3801 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2894 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3819 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2902 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3820 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2903 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3295 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [4], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3181 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3821 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [4], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2904 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3822 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [5], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2905 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3768 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2719 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3252 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[2][7][0]$y$1713) into $auto$simplemap.cc:420:simplemap_dff$2733 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3823 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2906 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3838 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [2], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2910 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3839 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[6][7][0]$y$2184) into $auto$simplemap.cc:420:simplemap_dff$2911 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3765 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [3], S=$memory\fmm2$wren[2][7][0]$y$2042) into $auto$simplemap.cc:420:simplemap_dff$2716 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3805 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [6], S=$memory\fmm2$wren[4][7][0]$y$2114) into $auto$simplemap.cc:420:simplemap_dff$2898 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3818 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1064 [1], S=$memory\fmm2$wren[5][7][0]$y$2148) into $auto$simplemap.cc:420:simplemap_dff$2901 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2627 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[2][7][0]$y$1298) into $auto$simplemap.cc:420:simplemap_dff$3354 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3298 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3184 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3236 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [3], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3434 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3238 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [5], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3436 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3600 (A=1'0, B=\cur [1], S=$0$memwr$\fmm1$cpu/DECODER.v:99$42_EN[7:0]$167 [7]) into $auto$simplemap.cc:420:simplemap_dff$3343 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3297 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[1][7][0]$y$1675) into $auto$simplemap.cc:420:simplemap_dff$3183 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2665 (A=1'0, B=\cur [0], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3902 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3004 (A=\fsm1_next [0], B=1'0, S=\sigflush) into $auto$simplemap.cc:420:simplemap_dff$3544 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3005 (A=\fsm1_next [1], B=1'0, S=\sigflush) into $auto$simplemap.cc:420:simplemap_dff$3545 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2960 (A=$procmux$365.Y_B [0], B=1'0, S=\sigflush) into $auto$simplemap.cc:420:simplemap_dff$3549 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2961 (A=$procmux$365.Y_B [1], B=1'0, S=\sigflush) into $auto$simplemap.cc:420:simplemap_dff$3550 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2929 (A=1'0, B=\fadr [0], S=\sigflush) into $auto$simplemap.cc:420:simplemap_dff$3552 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3173 (A=$0$memwr$\fmm0$cpu/DECODER.v:95$41_ADDR[2:0]$162 [1], B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3554 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3174 (A=$0$memwr$\fmm0$cpu/DECODER.v:95$41_ADDR[2:0]$162 [2], B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3555 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3172 (A=$auto$simplemap.cc:309:simplemap_lut$7918, B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3553 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3175 (A=$add$cpu/DECODER.v:94$174_Y [3], B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3556 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3449 (A=$procmux$874_Y [0], B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3557 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3450 (A=$procmux$874_Y [1], B=1'0, S=\flush) into $auto$simplemap.cc:420:simplemap_dff$3558 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2796 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [1], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3572 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2797 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [2], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3573 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2798 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [3], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3574 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2799 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [4], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3575 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2800 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [5], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3576 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2801 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [6], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3577 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3239 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [6], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3437 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3240 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [7], S=$memory\fmm1$wren[3][7][0]$y$1747) into $auto$simplemap.cc:420:simplemap_dff$3438 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2802 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1048 [7], S=$memory\fmm0$wren[1][7][0]$y$1238) into $auto$simplemap.cc:420:simplemap_dff$3578 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3456 (A=1'0, B=$add$cpu/DECODER.v:59$64_Y [1], S=$0\acki[0:0]) into $auto$simplemap.cc:420:simplemap_dff$3644 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3457 (A=1'0, B=$add$cpu/DECODER.v:59$64_Y [2], S=$0\acki[0:0]) into $auto$simplemap.cc:420:simplemap_dff$3645 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3455 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$7899, S=$0\acki[0:0]) into $auto$simplemap.cc:420:simplemap_dff$3643 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3458 (A=1'0, B=$add$cpu/DECODER.v:59$64_Y [3], S=$0\acki[0:0]) into $auto$simplemap.cc:420:simplemap_dff$3646 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3410 (A=1'0, B=\cur [1], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3648 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3411 (A=1'0, B=\cur [2], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3649 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3412 (A=1'0, B=\cur [3], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3650 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3413 (A=1'0, B=\cur [4], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3651 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3414 (A=1'0, B=\cur [5], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3652 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3415 (A=1'0, B=\cur [6], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3653 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3310 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1056 [0], S=$memory\fmm1$wren[0][7][0]$y$1639) into $auto$simplemap.cc:420:simplemap_dff$2597 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3416 (A=1'0, B=\cur [7], S=$0$memwr$\fmm2$cpu/DECODER.v:104$43_EN[7:0]$170 [7]) into $auto$simplemap.cc:420:simplemap_dff$3654 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3999 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3855 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4000 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3856 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4001 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3857 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4002 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3858 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4003 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3859 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4004 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3860 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$3998 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3854 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4005 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[1][7][0]$y$2333) into $auto$simplemap.cc:420:simplemap_dff$3861 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4018 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3863 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4019 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3864 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4020 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3865 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4021 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3866 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4022 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3867 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4023 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3868 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4017 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3862 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4024 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[2][7][0]$y$2371) into $auto$simplemap.cc:420:simplemap_dff$3869 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4036 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3871 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4037 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3872 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4038 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3873 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4039 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3874 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4040 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3875 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4041 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3876 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4035 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3870 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4042 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[3][7][0]$y$2405) into $auto$simplemap.cc:420:simplemap_dff$3877 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4055 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3879 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4056 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3880 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4057 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3881 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4058 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3882 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4059 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3883 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4060 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3884 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4054 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3878 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4061 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[4][7][0]$y$2443) into $auto$simplemap.cc:420:simplemap_dff$3885 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4073 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3887 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4074 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3888 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4075 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3889 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4076 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3890 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4077 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3891 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4078 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3892 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4072 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3886 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4079 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[5][7][0]$y$2477) into $auto$simplemap.cc:420:simplemap_dff$3893 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4092 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [1], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3895 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4093 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [2], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3896 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4094 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [3], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3897 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4095 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [4], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3898 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4096 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [5], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3899 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4097 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [6], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3900 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4091 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [0], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3894 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4098 (A=1'0, B=$auto$rtlil.cc:1936:Mux$1072 [7], S=$memory\fmm3$wren[6][7][0]$y$2513) into $auto$simplemap.cc:420:simplemap_dff$3901 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2666 (A=1'0, B=\cur [1], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3903 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2667 (A=1'0, B=\cur [2], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3904 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2668 (A=1'0, B=\cur [3], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3905 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2669 (A=1'0, B=\cur [4], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3906 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2670 (A=1'0, B=\cur [5], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3907 (SB_DFFNE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2671 (A=1'0, B=\cur [6], S=$0$memwr$\fmm3$cpu/DECODER.v:108$44_EN[7:0]$173 [7]) into $auto$simplemap.cc:420:simplemap_dff$3908 (SB_DFFNE).

2.40. Executing ICE40_OPT pass (performing simple optimizations).

2.40.1. Running ICE40 specific optimizations.

2.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 558 cells.

2.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..
Removed 239 unused cells and 2749 unused wires.

2.40.6. Rerunning OPT passes. (Removed registers in this run.)

2.40.7. Running ICE40 specific optimizations.

2.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DECODER.

2.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DECODER'.
Removed a total of 0 cells.

2.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DECODER..

2.40.12. Finished OPT passes. (There is nothing left to do.)

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
No more expansions possible.

2.42. Executing ABC pass (technology mapping using ABC).

2.42.1. Extracting gate netlist of module `\DECODER' to `<abc-temp-dir>/input.blif'..
Extracted 572 gates and 921 wires to a netlist network with 347 inputs and 183 outputs.

2.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     196.
ABC: Participating nodes from both networks       =     463.
ABC: Participating nodes from the first network   =     197. (  59.70 % of nodes)
ABC: Participating nodes from the second network  =     266. (  80.61 % of nodes)
ABC: Node pairs (any polarity)                    =     197. (  59.70 % of names can be moved)
ABC: Node pairs (same polarity)                   =     195. (  59.09 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      329
ABC RESULTS:        internal signals:      391
ABC RESULTS:           input signals:      347
ABC RESULTS:          output signals:      183
Removing temp directory.

2.43. Executing ICE40_WRAPCARRY pass (wrap carries).

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 4 unused cells and 678 unused wires.

2.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      358
  1-LUT                8
  2-LUT               57
  3-LUT               80
  4-LUT              213
  with \SB_CARRY      25

Eliminating LUTs.
Number of LUTs:      358
  1-LUT                8
  2-LUT               57
  3-LUT               80
  4-LUT              213
  with \SB_CARRY      25

Combining LUTs.
Number of LUTs:      355
  1-LUT                7
  2-LUT               55
  3-LUT               78
  4-LUT              215
  with \SB_CARRY      25

Eliminated 0 LUTs.
Combined 3 LUTs.

2.46. Executing TECHMAP pass (map to technology primitives).

2.46.1. Executing Verilog-2005 frontend: /home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/kevin/.apio/packages/toolchain-yosys/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001100110 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 712 unused wires.

2.47. Executing AUTONAME pass.
Renamed 6759 objects in module DECODER (24 iterations).

2.48. Executing HIERARCHY pass (managing design hierarchy).

2.48.1. Analyzing design hierarchy..
Top module:  \DECODER

2.48.2. Analyzing design hierarchy..
Top module:  \DECODER
Removed 0 unused modules.

2.49. Printing statistics.

=== DECODER ===

   Number of wires:                353
   Number of wire bits:            790
   Number of public wires:         353
   Number of public wire bits:     790
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                726
     SB_CARRY                       25
     SB_DFF                          1
     SB_DFFE                        73
     SB_DFFESR                       9
     SB_DFFNE                        1
     SB_DFFNESR                    262
     SB_LUT4                       355

2.50. Executing CHECK pass (checking for obvious problems).
checking module DECODER..
found and reported 0 problems.

End of script. Logfile hash: a04eb2f478
CPU: user 1.37s system 0.02s, MEM: 57.02 MB total, 53.88 MB resident
Yosys 0.9+932 (git sha1 UNKNOWN, x86_64-linux-gnu-g++ 7.3.0-16ubuntu3 -O3 -DNDEBUG)
Time spent: 21% 18x opt_expr (0 sec), 14% 19x opt_clean (0 sec), ...
